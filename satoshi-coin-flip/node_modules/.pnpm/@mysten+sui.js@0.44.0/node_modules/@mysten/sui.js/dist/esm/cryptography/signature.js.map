{
  "version": 3,
  "sources": ["../../../src/cryptography/signature.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\n\nimport { bcs } from '../bcs/index.js';\nimport type { MultiSigStruct } from '../multisig/publickey.js';\nimport { computeZkLoginAddressFromSeed } from '../zklogin/address.js';\nimport { extractClaimValue } from '../zklogin/jwt-utils.js';\nimport { parseZkLoginSignature } from '../zklogin/signature.js';\nimport type { PublicKey } from './publickey.js';\nimport type { SignatureScheme } from './signature-scheme.js';\nimport {\n\tSIGNATURE_FLAG_TO_SCHEME,\n\tSIGNATURE_SCHEME_TO_FLAG,\n\tSIGNATURE_SCHEME_TO_SIZE,\n} from './signature-scheme.js';\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SerializeSignatureInput = {\n\tsignatureScheme: SignatureScheme;\n\t/** Base64-encoded signature */\n\tsignature: Uint8Array;\n\t/** Base64-encoded public key */\n\tpublicKey?: PublicKey;\n};\n\n/**\n * (`flag || signature || pubkey` bytes, as base-64 encoded string).\n * Signature is committed to the intent message of the transaction data, as base-64 encoded string.\n */\nexport type SerializedSignature = string;\n\n/**\n * Takes in a signature, its associated signing scheme and a public key, then serializes this data\n */\nexport function toSerializedSignature({\n\tsignature,\n\tsignatureScheme,\n\tpublicKey,\n}: SerializeSignatureInput): SerializedSignature {\n\tif (!publicKey) {\n\t\tthrow new Error('`publicKey` is required');\n\t}\n\n\tconst pubKeyBytes = publicKey.toRawBytes();\n\tconst serializedSignature = new Uint8Array(1 + signature.length + pubKeyBytes.length);\n\tserializedSignature.set([SIGNATURE_SCHEME_TO_FLAG[signatureScheme]]);\n\tserializedSignature.set(signature, 1);\n\tserializedSignature.set(pubKeyBytes, 1 + signature.length);\n\treturn toB64(serializedSignature);\n}\n\n/**\n * Decodes a serialized signature into its constituent components: the signature scheme, the actual signature, and the public key\n */\nexport function parseSerializedSignature(serializedSignature: SerializedSignature) {\n\tconst bytes = fromB64(serializedSignature);\n\n\tconst signatureScheme =\n\t\tSIGNATURE_FLAG_TO_SCHEME[bytes[0] as keyof typeof SIGNATURE_FLAG_TO_SCHEME];\n\n\tif (signatureScheme === 'MultiSig') {\n\t\tconst multisig: MultiSigStruct = bcs.MultiSig.parse(bytes.slice(1));\n\t\treturn {\n\t\t\tserializedSignature,\n\t\t\tsignatureScheme,\n\t\t\tmultisig,\n\t\t\tbytes,\n\t\t};\n\t}\n\n\tif (signatureScheme === 'ZkLogin') {\n\t\tconst signatureBytes = bytes.slice(1);\n\t\tconst { inputs, maxEpoch, userSignature } = parseZkLoginSignature(signatureBytes);\n\t\tconst { issBase64Details, addressSeed } = inputs;\n\t\tconst iss = extractClaimValue<string>(issBase64Details, 'iss');\n\t\tconst address = computeZkLoginAddressFromSeed(BigInt(addressSeed), iss);\n\t\treturn {\n\t\t\tserializedSignature,\n\t\t\tsignatureScheme,\n\t\t\tzkLogin: {\n\t\t\t\tinputs,\n\t\t\t\tmaxEpoch,\n\t\t\t\tuserSignature,\n\t\t\t\tiss,\n\t\t\t\taddress,\n\t\t\t},\n\t\t\tbytes,\n\t\t};\n\t}\n\n\tif (!(signatureScheme in SIGNATURE_SCHEME_TO_SIZE)) {\n\t\tthrow new Error('Unsupported signature scheme');\n\t}\n\n\tconst size = SIGNATURE_SCHEME_TO_SIZE[signatureScheme as keyof typeof SIGNATURE_SCHEME_TO_SIZE];\n\n\tconst signature = bytes.slice(1, bytes.length - size);\n\tconst publicKey = bytes.slice(1 + signature.length);\n\n\treturn {\n\t\tserializedSignature,\n\t\tsignatureScheme,\n\t\tsignature,\n\t\tpublicKey,\n\t\tbytes,\n\t};\n}\n"],
  "mappings": "AAGA,SAAS,SAAS,aAAa;AAE/B,SAAS,WAAW;AAEpB,SAAS,qCAAqC;AAC9C,SAAS,yBAAyB;AAClC,SAAS,6BAA6B;AAGtC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAsBA,SAAS,sBAAsB;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AACD,GAAiD;AAChD,MAAI,CAAC,WAAW;AACf,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAEA,QAAM,cAAc,UAAU,WAAW;AACzC,QAAM,sBAAsB,IAAI,WAAW,IAAI,UAAU,SAAS,YAAY,MAAM;AACpF,sBAAoB,IAAI,CAAC,yBAAyB,eAAe,CAAC,CAAC;AACnE,sBAAoB,IAAI,WAAW,CAAC;AACpC,sBAAoB,IAAI,aAAa,IAAI,UAAU,MAAM;AACzD,SAAO,MAAM,mBAAmB;AACjC;AAKO,SAAS,yBAAyB,qBAA0C;AAClF,QAAM,QAAQ,QAAQ,mBAAmB;AAEzC,QAAM,kBACL,yBAAyB,MAAM,CAAC,CAA0C;AAE3E,MAAI,oBAAoB,YAAY;AACnC,UAAM,WAA2B,IAAI,SAAS,MAAM,MAAM,MAAM,CAAC,CAAC;AAClE,WAAO;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAEA,MAAI,oBAAoB,WAAW;AAClC,UAAM,iBAAiB,MAAM,MAAM,CAAC;AACpC,UAAM,EAAE,QAAQ,UAAU,cAAc,IAAI,sBAAsB,cAAc;AAChF,UAAM,EAAE,kBAAkB,YAAY,IAAI;AAC1C,UAAM,MAAM,kBAA0B,kBAAkB,KAAK;AAC7D,UAAM,UAAU,8BAA8B,OAAO,WAAW,GAAG,GAAG;AACtE,WAAO;AAAA,MACN;AAAA,MACA;AAAA,MACA,SAAS;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAEA,MAAI,EAAE,mBAAmB,2BAA2B;AACnD,UAAM,IAAI,MAAM,8BAA8B;AAAA,EAC/C;AAEA,QAAM,OAAO,yBAAyB,eAAwD;AAE9F,QAAM,YAAY,MAAM,MAAM,GAAG,MAAM,SAAS,IAAI;AACpD,QAAM,YAAY,MAAM,MAAM,IAAI,UAAU,MAAM;AAElD,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACD;",
  "names": []
}
