// src/hooks/wallet/useAutoConnectWallet.ts
import { useEffect } from "react";

// src/hooks/wallet/useConnectWallet.ts
import { useMutation } from "@tanstack/react-query";

// src/constants/walletMutationKeys.ts
var walletMutationKeys = {
  all: { baseScope: "wallet" },
  connectWallet: formMutationKeyFn("connect-wallet"),
  disconnectWallet: formMutationKeyFn("disconnect-wallet"),
  signPersonalMessage: formMutationKeyFn("sign-personal-message"),
  signTransactionBlock: formMutationKeyFn("sign-transaction-block"),
  signAndExecuteTransactionBlock: formMutationKeyFn("sign-and-execute-transaction-block"),
  switchAccount: formMutationKeyFn("switch-account")
};
function formMutationKeyFn(baseEntity) {
  return function mutationKeyFn(additionalKeys = []) {
    return [{ ...walletMutationKeys.all, baseEntity }, ...additionalKeys];
  };
}

// src/hooks/wallet/useWalletStore.ts
import { useContext } from "react";
import { useStore } from "zustand";

// src/contexts/walletContext.ts
import { createContext } from "react";
var WalletContext = createContext(null);

// src/hooks/wallet/useWalletStore.ts
function useWalletStore(selector) {
  const store = useContext(WalletContext);
  if (!store) {
    throw new Error(
      "Could not find WalletContext. Ensure that you have set up the WalletProvider."
    );
  }
  return useStore(store, selector);
}

// src/hooks/wallet/useConnectWallet.ts
function useConnectWallet({
  mutationKey,
  ...mutationOptions
} = {}) {
  const setWalletConnected = useWalletStore((state) => state.setWalletConnected);
  return useMutation({
    mutationKey: walletMutationKeys.connectWallet(mutationKey),
    mutationFn: async ({ wallet, accountAddress, ...standardConnectInput }) => {
      const connectResult = await wallet.features["standard:connect"].connect(standardConnectInput);
      const connectedSuiAccounts = connectResult.accounts.filter(
        (account) => account.chains.some((chain) => chain.split(":")[0] === "sui")
      );
      const selectedAccount = getSelectedAccount(connectedSuiAccounts, accountAddress);
      setWalletConnected(wallet, connectedSuiAccounts, selectedAccount);
      return { accounts: connectedSuiAccounts };
    },
    ...mutationOptions
  });
}
function getSelectedAccount(connectedAccounts, accountAddress) {
  if (connectedAccounts.length === 0) {
    return null;
  }
  if (accountAddress) {
    const selectedAccount = connectedAccounts.find((account) => account.address === accountAddress);
    return selectedAccount ?? connectedAccounts[0];
  }
  return connectedAccounts[0];
}

// src/hooks/wallet/useWallets.ts
function useWallets() {
  return useWalletStore((state) => state.wallets);
}

// src/hooks/wallet/useAutoConnectWallet.ts
function useAutoConnectWallet(autoConnectEnabled) {
  const { mutate: connectWallet } = useConnectWallet();
  const wallets = useWallets();
  const lastConnectedWalletName = useWalletStore((state) => state.lastConnectedWalletName);
  const lastConnectedAccountAddress = useWalletStore((state) => state.lastConnectedAccountAddress);
  useEffect(() => {
    if (!autoConnectEnabled || !lastConnectedWalletName)
      return;
    const wallet = wallets.find((wallet2) => wallet2.name === lastConnectedWalletName);
    if (wallet) {
      connectWallet({
        wallet,
        accountAddress: lastConnectedAccountAddress || void 0,
        silent: true
      });
    }
  }, [
    autoConnectEnabled,
    connectWallet,
    lastConnectedAccountAddress,
    lastConnectedWalletName,
    wallets
  ]);
}
export {
  useAutoConnectWallet
};
//# sourceMappingURL=useAutoConnectWallet.js.map
